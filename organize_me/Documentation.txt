Summary of Project:

	This project is to create a application that will help simplify and streamline organization by combining
calendars and reminders (along with some other functions like recuring payments and bills) so that people can get their life in order.  You can also
add recuring payments that you may have, and the algorithm will properly give you notifications to let you know when
a payment is upcoming so you don't get suprised and are able to budget your life better.


To do:

Sprint One: Create Layout

1. Pages: Home/Customize/Settings
2. Create Cards and Layouts for each page *each will be subject to change*
3. Implement Calendar API and set up layouts for each function

Page 1: Home (DONE)
	- This will hold the information that the user will be looking for, should be mostly a static page
Page 2: Customization Page (CURRENTLY WORKING ON)
	- This page will be updating and adding to the Home Page.  Add dates, reminders, and payments
Page 3: Settings Page
	- Show the user their information
	- Log out Button
Login Page:
	- Ask user to enter their information
	- Allow people to create a new account

Sprint 2: Functionality

Home Page and Cards:
	Calendar:
		- Make a way for people to add things to the calendar
		- Make different types of icons for calendar events

	Reminders:
		- Sync with the Calendar to show upcoming events and things to do

	Bills/Payments:
		- Manually Log different Payments that you have *don't want to sync with any real card because security*
		- Create the best algorithm to figure out when payments will be due
		- Send notifications for when a payment is coming up

Customize Page:
	- Have buttons to create new dates, reminders, and payments
	- When a new event is created, it should sync it accross all or at least display properly
	
Settings:
	- Have user information and account information
	-

Sprint 3: User friednly implementations
	- Allow people to sync their Google Calendar/possible iOS calendar as well
	- Allow people to customize the Home Page
	- Some type of log in method (probably firebase)


Temp Code:

 Widget build(BuildContext context) {
    return WillPopScope(
      child: Container(
        child: SafeArea(
          child: Scaffold(
            body: SingleChildScrollView(
              child: Container(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: <Widget>[
                    // THIS IS THE TOP WIDGET FOR THE CALENDAR
                    Container(
                      child: DesignCard(
                        child: Column(
                          children: <Widget>[
                            TableCalendar(
                              calendarStyle: CalendarStyle(
                                todayColor: Colors.blue[600],
                                selectedColor: Colors.blue[900],
                              ),
                              calendarController: _calendarController,
                            )
                          ],
                        ),
                      ),
                    ),


                    // SECOND WIDGET FOR THE REMINDERS
                    DesignCard(
                      child: Row(
                        children: <Widget>[
                          Flexible(
                            child: Container(
                              width: 1000,
                              child: SmallDesignCard(
                                child: Column(
                                  children: <Widget>[
                                    Text(
                                      "Reminder 1"
                                    )
                                  ],
                                ),
                              ),
                            ),
                          ),
                          Flexible(
                            child: Container(
                              width: 1000,
                              child: SmallDesignCard(
                                child: Column(
                                  children: <Widget>[
                                    Text(
                                      "Reminder 2"
                                    )
                                  ],
                                ),
                              ),
                            ),
                          ),
                          Flexible(
                            child: Container(
                              width: 1000,
                              child: SmallDesignCard(
                                child: Column(
                                  children: <Widget>[
                                    Text(
                                      "Reminder 3"
                                    )
                                  ],
                                ),
                              ),
                            ),
                          ),
                          Flexible(
                            child: Container(
                              width: 1000,
                              child: SmallDesignCard(
                                child: Column(
                                  children: <Widget>[
                                    Text(
                                      "Reminder 4"
                                    )
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),


                    // THIRD WIDGET FOR THE UPCOMMING PAYMENTS
                    DesignCard(
                      child: Column(
                        children: <Widget>[
                          
                        ],
                      ),
                    )
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
      onWillPop: () async => true,
    );
  }



@override
  Widget build (BuildContext context) {
    return WillPopScope(
      child: ExpandableTheme(
        data:
          const ExpandableThemeData(
            iconColor: Colors.blue,
            useInkWell: true,
          ),
        child: ListView(
          physics: const BouncingScrollPhysics(),
          children: <Widget>[
            Calendar(),
            Reminders(),
            Bills(),
          ],
        ),
      ),
    );
  }
}

class Calendar extends StatelessWidget {
  @override
  Widget build (BuildContext context) {
    return ExpandableNotifier(
      child: Padding(
        
      ),
    )
  }
}

class Reminders extends StatelessWidget {
  @override
  Widget build (BuildContext context) {

  }
}

class Bills extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    
  }
}

Widget build(BuildContext context) {
    return Scaffold(
      body: ReorderableList(
        onReorder: this._reorderCallback,
        onReorderDone: this._reorderDone,
        // decoratePlaceholder: (Widget item, double opacity) {
        // return DecoratedPlaceholder(widget: item, offset: 0);
        // },
        child: Column(
          children: <Widget>[
            Row(
              children: <Widget>[],
            ),
            Row(
              children: <Widget>[
                CustomScrollView(
                  // cacheExtent: 3000,
                  slivers: <Widget>[
                    SliverPadding(
                        padding: EdgeInsets.only(
                            bottom: MediaQuery.of(context).padding.bottom),
                        sliver: SliverList(
                          delegate: SliverChildBuilderDelegate(
                              (BuildContext context, int index) {
                            return Item(
                              data: _items[index],
                              // first and last attributes affect border drawn during dragging
                              isFirst: index == 0,
                              isLast: index == _items.length - 1,
                              draggingMode: _draggingMode,
                            );
                          }),
                        )),
                  ],
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}


@override
Widget build(BuildContext context) {
  return MaterialApp(
    debugShowCheckedModeBanner: false,
    home: Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          DesignCard(
            child: Column(
              children: <Widget>[
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: <Widget>[
                    Flexible(
                        child: Text("Add Event",
                            style: TextStyle(fontSize: 38),
                            textAlign: TextAlign.center)),
                    Flexible(
                      child: IconButton(
                        icon: new Icon(Icons.add_box),
                        iconSize: 50,
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: <Widget>[
                    Flexible(
                        child: Text("Add Bill",
                            style: TextStyle(fontSize: 38),
                            textAlign: TextAlign.center)),
                    Flexible(
                      child: IconButton(
                        icon: new Icon(Icons.add_box),
                        iconSize: 50,
                      ),
                    ),
                  ],
                )
              ],
            ),
          ),
        ],
      ),
    ),
  );
}
